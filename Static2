package ca.medis.web.util.amqp;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.ibm.mqlight.api.ClientOptions;
import com.ibm.mqlight.api.CompletionListener;
import com.ibm.mqlight.api.Delivery;
import com.ibm.mqlight.api.DestinationAdapter;
import com.ibm.mqlight.api.NonBlockingClient;
import com.ibm.mqlight.api.NonBlockingClientAdapter;
import com.ibm.mqlight.api.Promise;
import com.ibm.mqlight.api.StringDelivery;
import com.ibm.mqlight.api.impl.callback.ThreadPoolCallbackService;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AMQPWebbi120Receiver {

    private static final String HOST = "amqp://172.16.52.10";
    private static final String USERNAME = "appuser";
    private static final String PASSWORD = "iiyZmnFluuA-KQ66Yz8q";
    private static final String OUT_TOPIC = "amqp/BATCH.PP.QUEUE";
    private static final int POOL_SIZE = 5;

    private static final ClientOptions CLIENT_OPTIONS = ClientOptions.builder()
            .setCredentials(USERNAME, PASSWORD)
            .build();
    private static final ThreadPoolCallbackService CALLBACK_SERVICE = new ThreadPoolCallbackService(POOL_SIZE);

    private static String receivedData = null;

    public static void main(String[] args) {
        setupForReceive();
    }

    public static void setupForReceive() {
        System.out.println("Initializing AMQP Receiver...");

        NonBlockingClient client = NonBlockingClient.create(HOST, CLIENT_OPTIONS, new NonBlockingClientAdapter<Void>() {
            @Override
            public void onStarted(NonBlockingClient client, Void context) {
                System.out.println("Connection started for host: " + HOST);
            }

            @Override
            public void onError(NonBlockingClient client, Void context, Exception exception) {
                System.err.println("Failed to start connection for host: " + HOST);
                exception.printStackTrace();
            }
        }, null);

        client.subscribe(OUT_TOPIC, new DestinationAdapter<Void>() {
            @Override
            public void onMessage(NonBlockingClient client, Void context, Delivery delivery) {
                if (delivery.getType() == Delivery.Type.STRING) {
                    receivedData = ((StringDelivery) delivery).getData();
                    System.out.println("Data received from the queue: " + receivedData);

                    // Process received data
                    processReceivedData(receivedData);
                }
            }
        }, new CompletionListener<Void>() {
            @Override
            public void onSuccess(NonBlockingClient client, Void context) {
                System.out.println("Subscription to topic succeeded.");
            }

            @Override
            public void onError(NonBlockingClient client, Void context, Exception exception) {
                System.err.println("Subscription to topic failed.");
                exception.printStackTrace();
                client.stop(null, null);
            }
        }, null);
    }

    private static void processReceivedData(String data) {
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            Map<String, Object> dataMap = objectMapper.readValue(data, Map.class);

            String sapOrderNumber = dataMap.get("SAPOrderNumber").toString();
            System.out.println("SAPOrderNumber: " + sapOrderNumber);

            List<Map<String, Object>> items = (List<Map<String, Object>>) dataMap.get("Item");
            for (Map<String, Object> item : items) {
                BigDecimal boQuantity = new BigDecimal(item.get("BOQuantity").toString());
                BigDecimal mqe = new BigDecimal(item.get("MQE").toString());
                String productNumber = item.get("ProductNumber").toString();
                String productErrorCode = item.get("ProductErrorCode").toString();

                System.out.println("Item Details:");
                System.out.println("  BOQuantity: " + boQuantity);
                System.out.println("  MQE: " + mqe);
                System.out.println("  ProductNumber: " + productNumber);
                System.out.println("  ProductErrorCode: " + productErrorCode);
            }
        } catch (Exception e) {
            System.err.println("Error processing received data.");
            e.printStackTrace();
        }
    }
}
