import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.apache.commons.io.IOUtils;

import com.ibm.mqlight.api.ClientException;
import com.ibm.mqlight.api.ClientOptions;
import com.ibm.mqlight.api.CompletionListener;
import com.ibm.mqlight.api.NonBlockingClient;
import com.ibm.mqlight.api.NonBlockingClientAdapter;
import com.ibm.mqlight.api.Promise;
import com.ibm.mqlight.api.QOS;
import com.ibm.mqlight.api.SendOptions;
import com.ibm.mqlight.api.impl.callback.ThreadPoolCallbackService;

public class AMQPWebbi120SendTest {

    static String host = "amqp://172.16.52.10";
    static String userName = "appuser";
    static String password = "iiyZmnFluuA-KQ66Yz8q";
    static String outTopic = "amqp/BATCH.PP.QUEUE";
    static int poolSize = 3;
    static ClientOptions clientOpts = ClientOptions.builder().setCredentials(userName, password).build();

    static ThreadPoolCallbackService publishCallbackService = new ThreadPoolCallbackService(poolSize) {
        @Override
        public void run(Runnable runnable, Object orderingCtx, Promise<Void> promise) {
            System.out.println("CustomThreadPoolService.run called by thread: " + Thread.currentThread().getId());
            if (orderingCtx != null) {
                send(orderingCtx);
            }
        }
    };

    static ExecutorService clientThreadPool = Executors.newFixedThreadPool(10);
    static NonBlockingClient client;

    public static void main(String[] args) {
        System.out.println("Starting AMQP message sender...");
        sendByThreadPool();
    }

    public static void sendByThreadPool() {
        for (int i = 0; i < 10; i++) {
            Map<String, String> argsMap = new HashMap<>();
            argsMap.put("request", getMessage());
            publishCallbackService.run(null, argsMap, null);
            System.out.println("Loop counter: " + i);
        }
    }

    private static NonBlockingClient getClient() {
        if (client == null) {
            client = NonBlockingClient.create(host, clientOpts, new NonBlockingClientAdapter<Void>() {
                @Override
                public void onStarted(NonBlockingClient client, Void context) {
                    System.out.println("Connection started for host: " + host + ", Thread Id: " + Thread.currentThread().getId());
                }

                @Override
                public void onStopped(NonBlockingClient client, Void context, ClientException clientException) {
                    if (clientException != null) {
                        System.err.println("Exception in onStopped: " + clientException.getMessage());
                    }
                }
            }, null);
        }
        return client;
    }

    public static void send(Object argsMap) {
        if (argsMap instanceof Map) {
            @SuppressWarnings("unchecked")
            Map<String, String> map = (Map<String, String>) argsMap;
            String request = map.get("request");
            if (request != null) {
                System.out.println("Sending message: " + request + ", Thread Id: " + Thread.currentThread().getId());
                client = getClient();
                SendOptions sendOptions = SendOptions.builder().setQos(QOS.AT_LEAST_ONCE).build();
                client.send(outTopic, request, null, sendOptions, new CompletionListener<byte[]>() {
                    @Override
                    public void onSuccess(NonBlockingClient client, byte[] context) {
                        System.out.println("Message sent successfully.");
                    }

                    @Override
                    public void onError(NonBlockingClient client, byte[] context, Exception exception) {
                        System.err.println("Error sending message: " + exception.getMessage());
                    }
                }, null);
                try {
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            } else {
                System.err.println("Request is null.");
            }
        } else {
            System.err.println("Invalid argument type.");
        }
    }

    private static String getMessage() {
        try {
            return readFile("WEBBI120AMQPResponse.json") + Math.random();
        } catch (IOException e) {
            e.printStackTrace();
            return "Default Message";
        }
    }

    private static String readFile(String path) throws IOException {
        try (InputStream fileStream = AMQPWebbi120SendTest.class.getClassLoader().getResourceAsStream(path)) {
            if (fileStream == null) {
                throw new IOException("File not found: " + path);
            }
            return IOUtils.toString(fileStream, "UTF-8");
        }
    }
}
