{
   "SAPOrderNumber":"12",
   "Item":[
      {
         "Division":"13",
         "BOQuantity":"34",
         "MQE":"55",
         "ProductNumber":"33",
         "ProductErrorCode":"353"
      }
   ]
}
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import java.io.File;
import java.math.BigDecimal;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertTrue;

@RunWith(SpringJUnit4ClassRunner.class)
public class JsonMapTest {

    @Test
    public void testBigDecimalValuesInNestedJsonUsingReadValue() throws Exception {
        // Arrange: Initialize ObjectMapper and read JSON
        ObjectMapper objectMapper = new ObjectMapper();
        File jsonFile = new File("src/test/resources/data.json"); // Adjust path if needed

        // Read JSON as a Map
        Map<String, Object> jsonMap = objectMapper.readValue(jsonFile, Map.class);

        // Act: Navigate the Map to extract values
        List<Map<String, Object>> items = (List<Map<String, Object>>) jsonMap.get("Item");
        Map<String, Object> firstItem = items.get(0);

        BigDecimal expectedBOQuantity = new BigDecimal("34");
        BigDecimal expectedMQE = new BigDecimal("55");

        BigDecimal actualBOQuantity = new BigDecimal(firstItem.get("BOQuantity").toString());
        BigDecimal actualMQE = new BigDecimal(firstItem.get("MQE").toString());

        // Assert: Verify the extracted values using compareTo for BigDecimal comparison
        assertTrue(actualBOQuantity.compareTo(expectedBOQuantity) == 0, 
            "The BOQuantity value does not match! Expected: " + expectedBOQuantity + " but got: " + actualBOQuantity);
        assertTrue(actualMQE.compareTo(expectedMQE) == 0, 
            "The MQE value does not match! Expected: " + expectedMQE + " but got: " + actualMQE);
    }
}
