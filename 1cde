static NonBlockingClient getClientFromPool(String host, ClientOptions clientOpts) {
    synchronized (poolLock) {
        if (connectionPool.containsKey(host)) {
            return connectionPool.get(host);
        } else {
            return createClient(host, clientOpts);
        }
    }
}

private static NonBlockingClient createClient(String host, ClientOptions clientOpts) {
    NonBlockingClient client = NonBlockingClient.create(host, clientOpts, new NonBlockingClientAdapter<Void>() {

        public void onStarted(NonBlockingClient client, Void context) {
            logger.info("Connection started for host: " + host);
        }
    }, null);

    connectionPool.put(host, client);
    return client;
}


static void freeClientFromPool(String host) {
    synchronized (poolLock) {
        NonBlockingClient client = connectionPool.remove(host);
        if (client != null) {
            client.close((result, context) -> {
                if (result.succeeded()) {
                    logger.info("Connection closed for host: " + host);
                } else {
                    logger.warning("Failed to close connection for host: " + host);
                }
            }, null);
        }
    }
}

static void clearConnectionPool() {
    synchronized (poolLock) {
        for (String host : connectionPool.keySet()) {
            NonBlockingClient client = connectionPool.get(host);
            if (client != null) {
                client.close((result, context) -> {
                    if (result.succeeded()) {
                        logger.info("Connection closed for host: " + host);
                    } else {
                        logger.warning("Failed to close connection for host: " + host);
                    }
                }, null);
            }
        }
        connectionPool.clear();
    }
}


