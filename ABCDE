		// Arrange: Initialize ObjectMapper and read JSON
		ObjectMapper objectMapper = new ObjectMapper();
		String responseBody;

		responseBody = readFile("WEBBI120AMQPResponse.json");

		// Read JSON as a Map
		Map<String, Object> jsonMap = objectMapper.readValue(responseBody, Map.class);
		// Act: Navigate the Map to extract values
        // Act: Extract and validate SAPOrderNumber
        String sapOrderNumber = jsonMap.get("SAPOrderNumber").toString();
        assertEquals("The SAPOrderNumber does not match the expected value!", "12", sapOrderNumber);
        
		List<Map<String, Object>> items = (List<Map<String, Object>>) jsonMap.get("Item");
		Map<String, Object> firstItem = items.get(0);
		BigDecimal expectedBOQuantity = new BigDecimal("34");
		BigDecimal expectedMQE = new BigDecimal("55");

		BigDecimal actualBOQuantity = new BigDecimal(firstItem.get("BOQuantity").toString());
		BigDecimal actualMQE = new BigDecimal(firstItem.get("MQE").toString());
        String actualProductNumber = firstItem.get("ProductNumber").toString();
        String actualProductErrorCode = firstItem.get("ProductErrorCode").toString();

		// Assert: Verify the extracted values using compareTo for BigDecimal comparison
		assertTrue(
			"The BOQuantity value does not match! Expected: " + expectedBOQuantity + " but got: " + actualBOQuantity,
			actualBOQuantity.compareTo(expectedBOQuantity) == 0);
		assertTrue(
			"The MQE value does not match! Expected: " + expectedMQE + " but got: " + actualMQE,
			actualMQE.compareTo(expectedMQE) == 0);	
		
		// Test  Data from queue
		Map<String, Object> dataRecievedJsonMap = objectMapper.readValue(dataRecieved, Map.class);
		// Act: Navigate the Map to extract values
		
        // Act: Extract and validate SAPOrderNumber
        String dataRecievedSapOrderNumber = jsonMap.get("SAPOrderNumber").toString();
        assertEquals("The SAPOrderNumber does not match the expected value!", "12", dataRecievedSapOrderNumber);
        
		List<Map<String, Object>> dataRecievedItems = (List<Map<String, Object>>) dataRecievedJsonMap.get("Item");
		Map<String, Object> dataRecievedFirstItem = items.get(0);
		BigDecimal dataRecievedExpectedBOQuantity = new BigDecimal("34");
		BigDecimal dataRecievedEexpectedMQE = new BigDecimal("55");
        String dataExpectedProductNumber = "33";
        String dataExpectedProductErrorCode = "353";

		BigDecimal dataRecievedActualBOQuantity = new BigDecimal(dataRecievedFirstItem.get("BOQuantity").toString());
		BigDecimal dataRecievedActualMQE = new BigDecimal(dataRecievedFirstItem.get("MQE").toString());
        String dataActualProductNumber = firstItem.get("ProductNumber").toString();
        String dataActualProductErrorCode = firstItem.get("ProductErrorCode").toString();
	

		// Verify request body
		assertNotNull(dataRecieved);

		assertEquals(dataRecievedExpectedBOQuantity, dataRecievedActualBOQuantity);
		assertEquals(dataRecievedEexpectedMQE, dataRecievedActualMQE);
		
        // Assert: Verify Product fields
        assertEquals("ProductNumber does not match!", dataExpectedProductNumber, dataActualProductNumber);
        assertEquals("ProductErrorCode does not match!", dataExpectedProductErrorCode, dataActualProductErrorCode);
