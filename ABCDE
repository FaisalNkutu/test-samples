import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.test.context.junit4.SpringRunner;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.*;

@RunWith(SpringRunner.class)
public class JsonTest {

    @Test
    public void testDataRecievedFields() throws Exception {
        // Arrange: Initialize ObjectMapper
        ObjectMapper objectMapper = new ObjectMapper();

        // Mock dataRecieved JSON string
        String dataRecieved = "{\n" +
                "   \"SAPOrderNumber\":\"12\",\n" +
                "   \"Item\":[\n" +
                "      {\n" +
                "         \"Division\":\"13\",\n" +
                "         \"BOQuantity\":\"34\",\n" +
                "         \"MQE\":\"55\",\n" +
                "         \"ProductNumber\":\"33\",\n" +
                "         \"ProductErrorCode\":\"353\"\n" +
                "      }\n" +
                "   ]\n" +
                "}";

        // Assert: Verify dataRecieved is not null
        assertNotNull("dataRecieved is null!", dataRecieved);

        // Act: Parse dataRecieved into a Map
        Map<String, Object> dataRecievedJsonMap = objectMapper.readValue(dataRecieved, Map.class);

        // Extract and validate SAPOrderNumber
        String dataRecievedSapOrderNumber = dataRecievedJsonMap.get("SAPOrderNumber").toString();
        assertEquals("SAPOrderNumber in dataRecieved does not match!", "12", dataRecievedSapOrderNumber);

        // Extract and validate Item fields
        List<Map<String, Object>> dataRecievedItems = (List<Map<String, Object>>) dataRecievedJsonMap.get("Item");
        Map<String, Object> dataRecievedFirstItem = dataRecievedItems.get(0);

        BigDecimal expectedBOQuantity = new BigDecimal("34");
        BigDecimal expectedMQE = new BigDecimal("55");
        String expectedProductNumber = "33";
        String expectedProductErrorCode = "353";

        BigDecimal actualBOQuantity = new BigDecimal(dataRecievedFirstItem.get("BOQuantity").toString());
        BigDecimal actualMQE = new BigDecimal(dataRecievedFirstItem.get("MQE").toString());
        String actualProductNumber = dataRecievedFirstItem.get("ProductNumber").toString();
        String actualProductErrorCode = dataRecievedFirstItem.get("ProductErrorCode").toString();

        // Verify extracted values
        assertEquals("BOQuantity in dataRecieved does not match!", expectedBOQuantity, actualBOQuantity);
        assertEquals("MQE in dataRecieved does not match!", expectedMQE, actualMQE);
        assertEquals("ProductNumber in dataRecieved does not match!", expectedProductNumber, actualProductNumber);
        assertEquals("ProductErrorCode in dataRecieved does not match!", expectedProductErrorCode, actualProductErrorCode);
    }
}

