package ca.medis.web.util.amqp;

import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.apache.log4j.Logger;

import com.ibm.mqlight.api.ClientOptions;
import com.ibm.mqlight.api.Delivery;
import com.ibm.mqlight.api.DestinationAdapter;
import com.ibm.mqlight.api.NonBlockingClient;
import com.ibm.mqlight.api.NonBlockingClientAdapter;
import com.ibm.mqlight.api.StringDelivery;

public class AMQPCallExecutorDemo {

    private static AMQPConfiguration amqpConfiguration = null;
    private static Logger logger = Logger.getLogger(AMQPCallExecutorDemo.class.getName());

    // Pool of AMQP connections
    private static Map<String, NonBlockingClient> connectionPool = new HashMap<>();
    private static final Object poolLock = new Object();
    private static final int POOL_SIZE = 5;
    private static ExecutorService executorService = Executors.newFixedThreadPool(POOL_SIZE);

    public static void main(String[] cmdline) {
        Set<String> tradingPartnerCodes = new HashSet<>();
        String tpCode = "MSD";
        tradingPartnerCodes.add(tpCode);

        try {
            amqpConfiguration = amqpConfiguration.getInstance(tradingPartnerCodes);
        } catch (IOException e) {
            logger.error("Failed to load configuration: " + e);
        }

        String host = amqpConfiguration.getForTrading(tpCode, "Host");
        String userName = amqpConfiguration.getForTrading(tpCode, "Username");
        String password = amqpConfiguration.getForTrading(tpCode, "Password");
        String topic = amqpConfiguration.getForTrading(tpCode, "OutTopicName");

        ClientOptions clientOpts = ClientOptions.builder().setCredentials(userName, password).build();

        NonBlockingClient client = getClientFromPool(host, clientOpts);
        if (client != null) {
            subscribeToTopic(client, topic);
            sendMessages(client);
        }

        // Shutdown the executor when all tasks are completed
        executorService.shutdown();
    }

    private static NonBlockingClient getClientFromPool(String host, ClientOptions clientOpts) {
        synchronized (poolLock) {
            if (connectionPool.containsKey(host)) {
                return connectionPool.get(host);
            } else {
                NonBlockingClient client = NonBlockingClient.create(host, clientOpts, new NonBlockingClientAdapter<Void>() {
                    public void onStarted(NonBlockingClient client, Void context) {
                        logger.info("Connection started for host: " + host);
                    }
                }, null);
                connectionPool.put(host, client);
                return client;
            }
        }
    }

    private static void subscribeToTopic(NonBlockingClient client, String topic) {
        executorService.submit(() -> {
            client.subscribe(topic, new DestinationAdapter<Void>() {
                public void onMessage(NonBlockingClient client, Void context, Delivery delivery) {
                    if (delivery.getType() == Delivery.Type.STRING) {
                        logger.info("Consumed from Topic: " + ((StringDelivery) delivery).getData());
                    }
                }
            }, null, null);
        });
    }

    private static void sendMessages(NonBlockingClient client) {
        executorService.submit(() -> {
            for (int j = 0; j < 900; j++) {
                String message = "Jms Queue is Formed 5 For Demo Purposes - No Consuming! ==> " + j;
                client.send("amqp/mdp.batch.out.topic", message, null);
                logger.info("Message sent: " + message);
            }
        });
    }
}
