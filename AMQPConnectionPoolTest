package ca.medis.web.util.amqp;

import com.ibm.mqlight.api.ClientOptions;
import com.ibm.mqlight.api.NonBlockingClient;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class AMQPConnectionPoolTest {

    @InjectMocks
    private AMQPConnectionPool connectionPool;

    @Mock
    private NonBlockingClient mockClient;

    @Mock
    private ClientOptions.Builder mockClientOptionsBuilder;

    @Mock
    private ClientOptions mockClientOptions;

    @Before
    public void setUp() {
        // Set up mock behaviors or test-specific initializations

        // Mock the ClientOptions.Builder and its methods
        when(mockClientOptionsBuilder.setCredentials(anyString(), anyString())).thenReturn(mockClientOptionsBuilder);
        when(mockClientOptionsBuilder.build()).thenReturn(mockClientOptions);
    }

    @After
    public void tearDown() throws Exception {
        connectionPool.stopBatchListeners();  // Ensure cleanup of any resources
    }

    @Test
    public void testPublishToAMQP() {
        String testMessage = "Test Message";

        // Mock the behavior of publishToAMQP
        connectionPool.publishToAMQP(testMessage);

        // Verify if the send method was called on the mockClient
        verify(mockClient, atLeastOnce()).send(eq(testMessage), any(), any(), any());
    }

    @Test
    public void testConsumeFromAMQP() {
        doNothing().when(mockClient).subscribe(anyString(), any(), any());

        connectionPool.consumeFromAMQP();

        verify(mockClient, times(1)).subscribe(anyString(), any(), any());
    }

    @Test
    public void testStopBatchListeners() {
        doNothing().when(mockClient).stop(any(), any());

        connectionPool.stopBatchListeners();

        verify(mockClient, times(1)).stop(any(), any());
    }

    // Define a concrete subclass of AMQPConnectionPool for testing purposes
    static class TestAMQPConnectionPool extends AMQPConnectionPool {
        public TestAMQPConnectionPool() {
            super(null, "TestTopic", "TestTP");
        }

        @Override
        protected void getConnectionService(NonBlockingClient client, String amqpMessage) {
            // Simulated implementation for testing
        }
    }
}
