import com.ibm.mqlight.api.ClientOptions;
import com.ibm.mqlight.api.NonBlockingClient;
import com.ibm.mqlight.api.callback.Delivery;
import com.ibm.mqlight.api.callback.DestinationAdapter;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class PooledReceiver {
    private final ExecutorService executorService;
    private final List<NonBlockingClient> clientPool;
    private final int poolSize = 10;

    public PooledReceiver() {
        // Create a thread pool with 10 threads
        this.executorService = Executors.newFixedThreadPool(poolSize);
        // Create a connection pool for reuse
        this.clientPool = new ArrayList<>(poolSize);

        // Initialize client pool without ClientListener and State
        for (int i = 0; i < poolSize; i++) {
            NonBlockingClient.create("amqp://localhost", new ClientOptions(), new NonBlockingClient.Adapter<Void>() {
                @Override
                public void onStarted(NonBlockingClient client, Void context) {
                    System.out.println("Created connection for receiving");
                    synchronized (clientPool) {
                        clientPool.add(client);
                    }
                }
            }, null);
        }
    }

    public void start() {
        try {
            for (final NonBlockingClient client : clientPool) {
                // Reusing connections from the pool in threads
                executorService.execute(new Runnable() {
                    public void run() {
                        // Polling for messages in a loop
                        pollMessages(client);
                    }
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void pollMessages(NonBlockingClient client) {
        try {
            while (true) {
                // Manually poll or check for messages from a destination
                client.subscribe("myTopic", new DestinationAdapter() {
                    public void onMessage(NonBlockingClient client, String topic, Delivery delivery) {
                        System.out.println("Received message: " + new String(delivery.getData()));
                    }
                });
                
                // Add a delay to avoid continuous rapid polling
                Thread.sleep(1000);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        PooledReceiver receiver = new PooledReceiver();
        receiver.start();
    }
}
