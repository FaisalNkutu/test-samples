import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import com.ibm.mqlight.api.NonBlockingClient;
import com.ibm.mqlight.api.StringDelivery;

public class ConnectionPoolExample {

    private final ExecutorService executorService;
    private final LinkedBlockingQueue<NonBlockingClient> connectionPool;
    private final int poolSize = 10; // Size of the connection pool

    public ConnectionPoolExample() {
        executorService = Executors.newFixedThreadPool(poolSize);
        connectionPool = new LinkedBlockingQueue<>(poolSize);
        createConnectionPool();
    }

    private void createConnectionPool() {
        for (int i = 0; i < poolSize; i++) {
            NonBlockingClient.create("amqp://localhost:5672", (client, throwable) -> {
                if (throwable == null) {
                    connectionPool.offer(client);
                    System.out.println("Connection added to pool.");
                } else {
                    throwable.printStackTrace();
                }
            });
        }
    }

    public void start() {
        // Subscribe to a topic and use pooled connections
        for (int i = 0; i < poolSize; i++) {
            NonBlockingClient client = connectionPool.poll(); // Borrow a connection
            if (client != null) {
                client.subscribe("topic/test", (delivery) -> {
                    executorService.submit(() -> {
                        if (delivery instanceof StringDelivery) {
                            String message = ((StringDelivery) delivery).getData();
                            System.out.println("Received message: " + message);
                        }
                    });
                });
            }
        }

        // Shut down the executor service and connection pool when done
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            executorService.shutdown();
            connectionPool.forEach(NonBlockingClient::close); // Close all connections
            System.out.println("Executor service and connections shut down.");
        }));
    }

    public static void main(String[] args) {
        ConnectionPoolExample example = new ConnectionPoolExample();
        example.start();
    }
}
---------------------------------------------Sending-------------------------------
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import com.ibm.mqlight.api.NonBlockingClient;
import com.ibm.mqlight.api.StringDelivery;

public class ConnectionPoolExampleForSending {

    private final ExecutorService executorService;
    private final LinkedBlockingQueue<NonBlockingClient> connectionPool;
    private final int poolSize = 10; // Size of the connection pool

    public ConnectionPoolExampleForSending() {
        executorService = Executors.newFixedThreadPool(poolSize);
        connectionPool = new LinkedBlockingQueue<>(poolSize);
        createConnectionPool();
    }

    private void createConnectionPool() {
        for (int i = 0; i < poolSize; i++) {
            NonBlockingClient.create("amqp://localhost:5672", (client, throwable) -> {
                if (throwable == null) {
                    connectionPool.offer(client);
                    System.out.println("Connection added to pool.");
                } else {
                    throwable.printStackTrace();
                }
            });
        }
    }

    public void start() {
        // Use pooled connections to send messages
        for (int i = 0; i < poolSize; i++) {
            NonBlockingClient client = connectionPool.poll(); // Borrow a connection
            if (client != null) {
                sendMessage(client, "Hello from Connection Pool #" + i);
            }
        }

        // Shut down the executor service and connection pool when done
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            executorService.shutdown();
            connectionPool.forEach(NonBlockingClient::close); // Close all connections
            System.out.println("Executor service and connections shut down.");
        }));
    }

    private void sendMessage(NonBlockingClient client, String message) {
        executorService.submit(() -> {
            client.send("topic/test", message, (result, throwable) -> {
                if (throwable == null) {
                    System.out.println("Message sent: " + message);
                } else {
                    throwable.printStackTrace();
                }
            });
        });
    }

    public static void main(String[] args) {
        ConnectionPoolExampleForSending example = new ConnectionPoolExampleForSending();
        example.start();
    }
}


------------------------------Sending------------
