import com.ibm.mqlight.api.ClientOptions;
import com.ibm.mqlight.api.NonBlockingClient;
import com.ibm.mqlight.api.NonBlockingClientAdapter;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public abstract class AMQPConnectionPoolBase {

    protected final ExecutorService executorService;
    protected final List<NonBlockingClient> clientPool;
    protected int poolSize = 10;

    public AMQPConnectionPoolBase(String connectionUrl, String username, String password) {
        if (poolSize == 0) {
            poolSize = Runtime.getRuntime().availableProcessors();
        }
        this.executorService = Executors.newFixedThreadPool(poolSize);
        this.clientPool = new ArrayList<>(poolSize);
        ClientOptions clientOpts = ClientOptions.builder().setCredentials(username, password).build();

        for (int i = 0; i < poolSize; i++) {
            NonBlockingClient.create(connectionUrl, clientOpts, new NonBlockingClientAdapter<Void>() {
                @Override
                public void onStarted(NonBlockingClient client, Void context) {
                    System.out.println("Connection created");
                    synchronized (clientPool) {
                        clientPool.add(client);
                    }
                }
            }, null);
        }
    }

    public void start() {
        try {
            for (final NonBlockingClient client : clientPool) {
                executorService.execute(() -> performClientOperation(client));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    protected abstract void performClientOperation(NonBlockingClient client);

    public void stop() {
        executorService.shutdown();
        for (NonBlockingClient client : clientPool) {
            client.stop(null);
        }
    }
}
---------------------------------------------------------------------------
import com.ibm.mqlight.api.NonBlockingClient;

public class AMQPPooledSender extends AMQPConnectionPoolBase {

    public AMQPPooledSender(String connectionUrl, String username, String password) {
        super(connectionUrl, username, password);
    }

    @Override
    protected void performClientOperation(NonBlockingClient client) {
        try {
            while (true) {
                for (int i = 0; i < 10; i++) {
                    final String message = "Message " + i;
                    client.send("myTopic", message.getBytes(), null);
                }
                Thread.sleep(1000); // Avoid sending too rapidly
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        AMQPPooledSender sender = new AMQPPooledSender("amqp://localhost", "userName", "password");
        sender.start();
    }
}
------------------------------------------------------------------------------------------
import com.ibm.mqlight.api.Delivery;
import com.ibm.mqlight.api.DestinationAdapter;
import com.ibm.mqlight.api.NonBlockingClient;
import com.ibm.mqlight.api.StringDelivery;

public class AMQPPooledReceiver extends AMQPConnectionPoolBase {

    public AMQPPooledReceiver(String connectionUrl, String username, String password) {
        super(connectionUrl, username, password);
    }

    @Override
    protected void performClientOperation(NonBlockingClient client) {
        try {
            while (true) {
                client.subscribe("myTopic", new DestinationAdapter<Void>() {
                    @Override
                    public void onMessage(NonBlockingClient client, Void context, Delivery delivery) {
                        if (delivery.getType() == Delivery.Type.STRING) {
                            String message = ((StringDelivery) delivery).getData();
                            System.out.println("Received: " + message);
                        }
                    }
                }, null, null);
                Thread.sleep(1000); // Avoid continuous polling
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        AMQPPooledReceiver receiver = new AMQPPooledReceiver("amqp://localhost", "userName", "password");
        receiver.start();
    }
}
