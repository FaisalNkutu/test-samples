import com.ibm.mqlight.api.ClientOptions;
import com.ibm.mqlight.api.NonBlockingClient;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class PooledSender {
    private final ExecutorService executorService;
    private final List<NonBlockingClient> clientPool;
    private final int poolSize = 10;

    public PooledSender() {
        // Create a thread pool with 10 threads
        this.executorService = Executors.newFixedThreadPool(poolSize);
        // Create a connection pool for reuse
        this.clientPool = new ArrayList<>(poolSize);

        // Initialize client pool without ClientListener and State
        for (int i = 0; i < poolSize; i++) {
            NonBlockingClient.create("amqp://localhost", new ClientOptions(), new NonBlockingClient.Adapter<Void>() {
                @Override
                public void onStarted(NonBlockingClient client, Void context) {
                    System.out.println("Created connection for sending");
                    synchronized (clientPool) {
                        clientPool.add(client);
                    }
                }
            }, null);
        }
    }

    public void start() {
        try {
            for (final NonBlockingClient client : clientPool) {
                // Reusing connections from the pool in threads
                executorService.execute(new Runnable() {
                    public void run() {
                        // Polling to send messages in a loop
                        sendMessages(client);
                    }
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void sendMessages(NonBlockingClient client) {
        try {
            while (true) {
                // Manually send messages in a loop
                for (int i = 0; i < 10; i++) {
                    final String message = "Message " + i;
                    client.send("myTopic", message.getBytes(), new NonBlockingClient.Adapter<Void>() {
                        @Override
                        public void onSent(NonBlockingClient client, Void context, Exception exception) {
                            if (exception == null) {
                                System.out.println("Sent message: " + message);
                            } else {
                                System.out.println("Failed to send message: " + message);
                            }
                        }
                    });
                }
                
                // Add a delay to avoid continuous rapid sending
                Thread.sleep(1000);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        PooledSender sender = new PooledSender();
        sender.start();
    }
}
