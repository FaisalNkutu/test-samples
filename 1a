import com.ibm.mqlight.api.ClientOptions;
import com.ibm.mqlight.api.NonBlockingClient;
import com.ibm.mqlight.api.Client;
import com.ibm.mqlight.api.Delivery;
import com.ibm.mqlight.api.Message;
import com.ibm.mqlight.api.ReceiveOptions;
import com.ibm.mqlight.api.ReceiveStatus;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;

public class MQReceiverWithPooling {
    private ExecutorService executorService = Executors.newFixedThreadPool(10);  // 10 Threads
    private static final int POOL_SIZE = 5;
    private LinkedBlockingQueue<NonBlockingClient> connectionPool = new LinkedBlockingQueue<>(POOL_SIZE);

    public void start() {
        // Initialize pool with 5 connections
        for (int i = 0; i < POOL_SIZE; i++) {
            ClientOptions clientOptions = ClientOptions.builder().build();
            NonBlockingClient.create("amqp://localhost", clientOptions, (client, throwable) -> {
                if (throwable == null) {
                    connectionPool.add(client);
                } else {
                    System.err.println("Error creating client: " + throwable.getMessage());
                }
            });
        }

        // Non-blocking message receiving
        for (int i = 0; i < 10; i++) {
            executorService.submit(() -> {
                try {
                    NonBlockingClient client = connectionPool.take();  // Borrow connection
                    ReceiveOptions receiveOptions = ReceiveOptions.builder().autoConfirm(true).build();

                    client.subscribe("queue-name", receiveOptions, (Client recvClient, Delivery delivery) -> {
                        Message message = delivery.getMessage();
                        System.out.println("Received message: " + new String(message.getData()));
                    }, (Client recvClient, ReceiveStatus status) -> {
                        if (status.getError() != null) {
                            System.out.println("Error receiving message: " + status.getError().getMessage());
                        } else {
                            System.out.println("Subscription successful.");
                        }
                    });

                    connectionPool.put(client);  // Return connection to the pool
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    System.err.println("Thread interrupted: " + e.getMessage());
                }
            });
        }
    }

    public void stop() {
        executorService.shutdown();
    }

    public static void main(String[] args) {
        MQReceiverWithPooling receiver = new MQReceiverWithPooling();
        receiver.start();
    }
}
