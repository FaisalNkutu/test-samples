import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import com.ibm.mqlight.api.NonBlockingClient;
import com.ibm.mqlight.api.Message;
import com.ibm.mqlight.api.StringDelivery;

public class ConnectionPoolExampleForReceiving {

    private final ExecutorService executorService;
    private final LinkedBlockingQueue<NonBlockingClient> connectionPool;
    private final int poolSize = 10; // Size of the connection pool

    public ConnectionPoolExampleForReceiving() {
        executorService = Executors.newFixedThreadPool(poolSize);
        connectionPool = new LinkedBlockingQueue<>(poolSize);
        createConnectionPool();
    }

    private void createConnectionPool() {
        for (int i = 0; i < poolSize; i++) {
            NonBlockingClient.create("amqp://localhost:5672", (client, throwable) -> {
                if (throwable == null) {
                    connectionPool.offer(client);
                    System.out.println("Connection added to pool.");
                    subscribeToTopic(client); // Subscribe to a topic after adding to the pool
                } else {
                    throwable.printStackTrace();
                }
            });
        }
    }

    private void subscribeToTopic(NonBlockingClient client) {
        client.subscribe("topic/test", (message) -> {
            executorService.submit(() -> {
                System.out.println("Received message: " + message.getPayload(String.class));
            });
        }, (result, throwable) -> {
            if (throwable != null) {
                throwable.printStackTrace();
            }
        });
    }

    public void start() {
        // Keep the application running to receive messages
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            executorService.shutdown();
            connectionPool.forEach(NonBlockingClient::close); // Close all connections
            System.out.println("Executor service and connections shut down.");
        }));
    }

    public static void main(String[] args) {
        ConnectionPoolExampleForReceiving example = new ConnectionPoolExampleForReceiving();
        example.start();
    }
}
