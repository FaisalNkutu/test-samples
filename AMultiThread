


<dependency>
    <groupId>com.ibm.mqlight</groupId>
    <artifactId>mqlight</artifactId>
    <version>1.0.20210730</version> <!-- Verify this version exists or update accordingly -->
</dependency>


import java.util.concurrent.ExecutorService;


import java.util.concurrent.Executors;
import com.ibm.mqlight.api.Client;
import com.ibm.mqlight.api.ClientOptions;
import com.ibm.mqlight.api.Callback;
import com.ibm.mqlight.api.NonBlockingClient;
import com.ibm.mqlight.api.SendOptions;

public class NonBlockingProducerJava8 {
    private static final String SERVICE = "amqp://your-mq-server:5672";
    private static final String TOPIC = "exampleTopic";

    public static void main(String[] args) {
        // Use a thread pool to send messages concurrently
        ExecutorService executor = Executors.newFixedThreadPool(5);

        // Create client options
        ClientOptions options = ClientOptions.builder()
                .setId("ProducerClientId")  // Set a unique client ID
                .build();

        // Create a non-blocking client with a lambda for the callback
        NonBlockingClient.create(SERVICE, options, client -> {
            System.out.println("Client connected for producing messages!");

            // Submit multiple message-sending tasks to the executor
            for (int i = 0; i < 10; i++) {
                final int messageNumber = i;
                executor.submit(() -> {
                    String message = "Message " + messageNumber;

                    // Send the message asynchronously
                    client.send(TOPIC, message, SendOptions.builder().build(), new Callback<Void>() {
                        @Override
                        public void onSuccess(Void v) {
                            System.out.println("Successfully sent: " + message);
                        }

                        @Override
                        public void onFailure(Exception exception) {
                            System.out.println("Failed to send message: " + message + " due to: " + exception.getMessage());
                        }
                    });
                });
            }

            // Shutdown the executor after tasks complete
            executor.shutdown();
        }, exception -> {
            System.out.println("Failed to connect: " + exception.getMessage());
        }, client -> {
            System.out.println("Client disconnected.");
        });
    }
}
